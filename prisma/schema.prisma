// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletAddress     String    @map("wallet_address") @unique
  inviteCode        String?   @map("invite_code")
  referralCode      String?   @map("referral_code")
  referralCodeLimit Int?      @map("referral_code_limit")
  point             BigInt    @default(0)
  onboardingStep    BigInt    @default(1) @map("onboarding_step")
  finishOnboarding  Boolean   @default(false) @map("finish_onboarding")
  zkmeVerification  Boolean   @default(false) @map("zkme_verification")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  ownerships     UserPropertyOwnership[] @relation("OwnershipByUser")
  myReferral     Referral?        @relation(name: "InvitedUser")
  invitedUsers   Referral[]       @relation(name: "ReferralUser")
  completedQuest CompletedQuest[]

  @@map("users")
}

model Property {
  id            String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  marketAddress String                  @map("market_address")
  tokenAddress  String                  @map("token_address")
  propertyOwnerAddress  String?             @map("property_owner_address")
  tokenName     String?            @map("token_name")
  tokenSymbol   String?            @map("token_symbol")
  totalSupply   Int?               @map("total_supply")
  salePrice     Int?               @map("sale_price")
  address       String                  @map("address")
  location       String?             @map("location")
  city          String                  @map("city")
  state         String                  @map("state")
  country       String                  @map("country")
  type          String                  @map("type")
  chainId       Int?                    @map("chain_id")
  latitude      String?                 @map("latitude")
  longitude     String?                 @map("longitude")
  description   String                  @map("description") @db.Text
  status        String                  @default("pending") @map("status")
  isFeatured    Boolean?                @map("is_featured")
  isUpcoming    Boolean?                @map("is_upcoming")
  isAftermarket Boolean?                @map("is_aftermarket")
  createdBy     String                  @map("created_by")
  updatedBy     String                  @map("updated_by")
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  deletedAt     DateTime?               @map("deleted_at")
  facilities    PropertyFacility[]      @relation("PropertyFacilities")
  images        PropertyImage[]         @relation("PropertyImages")
  ownerships UserPropertyOwnership[] @relation("OwnershipOfProperty")
  @@map("properties")
}

model UserPropertyOwnership {
  walletAddress String   @map("wallet_address")
  propertyId    String   @map("property_id") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [walletAddress], references: [walletAddress], name: "OwnershipByUser")
  property Property @relation(fields: [propertyId], references: [id], name: "OwnershipOfProperty")

  @@id(name: "walletAddress_propertyId", [walletAddress, propertyId])
  @@unique([walletAddress, propertyId])
  @@map("user_property_ownerships")
}

model PropertyFacility {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId  String   @map("property_id") @db.Uuid
  type        String   @map("type")
  facility    String   @map("facility")
  isHighlight Boolean  @map("is_highlight")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  property Property @relation(fields: [propertyId], references: [id], name: "PropertyFacilities")

  @@map("property_facilities")
}

model PropertyImage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId  String   @map("property_id") @db.Uuid
  image       String   @map("image")
  isHighlight Boolean  @map("is_highlight")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  property Property @relation(fields: [propertyId], references: [id], name: "PropertyImages")

  @@map("property_images")
}

model PropertyListingRequest {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String   @map("name")
  phone           String   @map("phone")
  email           String   @map("email")
  address         String   @map("address")
  priceEstimation Decimal  @map("price_estimation") @db.Money
  status          String   @default("pending") @map("status")
  propertyData    Json?    @map("property_data")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("property_listing_requests")
}

model Referral {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referralUserId String   @map("referral_user_id") @db.Uuid
  invitedUserId  String?  @unique @map("invited_user_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  referralUser User  @relation(fields: [referralUserId], references: [id], name: "ReferralUser")
  invitedUser  User? @relation(fields: [invitedUserId], references: [id], name: "InvitedUser")

  @@map("referrals")
}

model Quest {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl       String?   @map("image_url") @db.Text
  authorName     String    @map("author_name")
  authorUsername String?   @map("author_username")
  title          String?
  description    String    @db.Text
  type           String
  startDate      DateTime? @map("start_date")
  endDate        DateTime? @map("end_date")
  status         String    @default("active")
  rewardPoint    BigInt    @map("reward_point")
  totalReward    BigInt    @default(0) @map("total_reward")
  campaignLink   String?   @map("campaign_link") @db.Text
  ctaButton      String    @map("cta_button")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  completedQuest CompletedQuest[]

  @@map("quests")
}

model CompletedQuest {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questId     String   @map("quest_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  rewardPoint BigInt   @map("reward_point")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  quest Quest @relation(fields: [questId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("completed_quests")
}

